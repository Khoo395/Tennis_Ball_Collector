#pragma config(Sensor, in1, sharp_front_top, sensorAnalog)
#pragma config(Sensor, in2, sharp_front_bottom_l, sensorAnalog)
#pragma config(Sensor, in3, sharp_front_bottom_r, sensorAnalog)
#pragma config(Sensor, in4, sharp_short, sensorAnalog)
#pragma config(Sensor, in5, dispense_limit_switch, sensorAnalog)
#pragma config(Sensor, in8, compass_power, sensorNone)
#pragma config(Sensor, dgtl1, compass1, sensorDigitalIn)
#pragma config(Sensor, dgtl2, compass2, sensorDigitalIn)
#pragma config(Sensor, dgtl3, compass3, sensorDigitalIn)
#pragma config(Sensor, dgtl4, compass4, sensorDigitalIn)
#pragma config(Sensor, dgtl5, front_r_line, sensorDigitalIn)
#pragma config(Sensor, dgtl7, front_l_line, sensorDigitalIn)
#pragma config(Sensor, dgtl8, ball_collection_limit, sensorDigitalIn)
#pragma config(Sensor, dgtl9, home_limit_r, sensorDigitalIn)
#pragma config(Sensor, dgtl10, home_limit_l, sensorDigitalIn)
#pragma config(Sensor, dgtl11, back_l_line, sensorDigitalIn)
#pragma config(Sensor, dgtl12, back_r_line, sensorDigitalIn)
#pragma config(Motor, port2, roller_driver, tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor, port3, left_driver, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor, port8, right_driver, tmotorVex393_MC29, openLoop)
#pragma config(Motor, port9, ball_dispense_driver, tmotorServoStandard, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

float dist_ft;
float dist_bl;
float dist_br;
float dist_back;
int dispense_limit_switch_voltage;

enum Orientation
{
    NORTH,
    NORTH_EAST,
    EAST,
    SOUTH_EAST,
    SOUTH,
    SOUTH_WEST,
    WEST,
    NORTH_WEST,
    INVALID_COMBINATION
};

enum BoundarySide
{
    FRONT_LEFT,
    FRONT_RIGHT,
    BACK_LEFT,
    BACK_RIGHT,
    NO_BOUNDARY_DETECTED
};

float read_sharp_front_top()
{
    dist_ft = SensorValue(sharp_front_top);
    writeDebugStreamLine("top: %d", dist_ft);
    return dist_ft;
    // return SensorValue(sharp_front_top);
}

float read_sharp_front_bottom_l()
{
    dist_bl = SensorValue(sharp_front_bottom_l);
    writeDebugStreamLine("bottom left: %d", dist_bl);
    return dist_bl;
    // return SensorValue(sharp_front_bottom_l);
}

float read_sharp_front_bottom_r()
{
    dist_br = SensorValue(sharp_front_bottom_r);
    writeDebugStreamLine("bottom right: %d", dist_br);
    return dist_br;
    // return SensorValue(sharp_front_bottom_r);
}

float read_short_sharp()
{
    dist_back = SensorValue(sharp_short);
    return dist_back;
}

int read_dispense_limit_switch()
{
    dispense_limit_switch_voltage = SensorValue(dispense_limit_switch);
    if (dispense_limit_switch_voltage != 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

BoundarySide scan_boundary()
{
    int frontLeft = SensorValue(front_l_line);
    int frontRight = SensorValue(front_r_line);
    int backLeft = SensorValue(back_l_line);
    int backRight = SensorValue(back_r_line);

    if (frontLeft == 1)
    {
        writeDebugStreamLine("%s", "FRONT_LEFT");
        return FRONT_LEFT;
    }
    else if (frontRight == 1)
    {
        writeDebugStreamLine("%s", "FRONT_RIGHT");
        return FRONT_RIGHT;
    }
    else if (backLeft == 1)
    {
        writeDebugStreamLine("%s", "BACK_LEFT");
        return BACK_LEFT;
    }
    else if (backRight == 1)
    {
        writeDebugStreamLine("%s", "BACK_RIGHT");
        return BACK_RIGHT;
    }
    else
    {
        writeDebugStreamLine("%s", "NO_BOUNDARY_DETECTED");
        return NO_BOUNDARY_DETECTED;
    }
}

Orientation read_compass()
{
    int pin1 = SensorValue(compass1);
    int pin2 = SensorValue(compass2);
    int pin3 = SensorValue(compass3);
    int pin4 = SensorValue(compass4);
    int combination = pin1 * 1000 + pin2 * 100 + pin3 * 10 + pin4;

    switch (combination)
    {
    case 1110:
        writeDebugStreamLine("%s", "NORTH");
        return NORTH;
    case 1100:
        writeDebugStreamLine("%s", "NORTH_EAST");
        return NORTH_EAST;
    case 1101:
        writeDebugStreamLine("%s", "EAST");
        return EAST;
    case 1001:
        writeDebugStreamLine("%s", "SOUTH_EAST");
        return SOUTH_EAST;
    case 1011:
        writeDebugStreamLine("%s", "SOUTH");
        return SOUTH;
    case 0011:
        writeDebugStreamLine("%s", "SOUTH_WEST");
        return SOUTH_WEST;
    case 0111:
        writeDebugStreamLine("%s", "WEST");
        return WEST;
    case 0110:
        writeDebugStreamLine("%s", "NORTH_WEST");
        return NORTH_WEST;
    default:
        writeDebugStreamLine("%s", "INVALID_COMBINATION");
        return INVALID_COMBINATION;
    }
}
